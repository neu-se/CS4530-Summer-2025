---
import { getCollection } from "astro:content";
const pages = await getCollection("pages");

// Filter out the home page and any pages that set the nav_exclude property
const contentPages = pages
  .filter((page) => page.data.layout !== "home")
  .filter((page) => page.data.layout !== "page" || !page.data.nav_exclude);
type Page = (typeof contentPages)[number];

const orderedSections = createOrderedSectionHierarchy(contentPages);

/**
 * Given pages returned from getCollection, return a two-level hierarchy,
 * grouping the pages /foo/bar, /foo/baz, and /foo/etc underneath the
 * page /foo (if a page /foo exists).
 *
 * WARNING: currently, if there are non-excluded pages like /foo/bar and
 * there's no /foo page, there will still be a link to /foo which will result
 * in a 404 error.
 *
 * @param pages Arbitrarily-ordered pages returned from getCollection
 */
function createOrderedSectionHierarchy(pages: Page[]): {
  path: string;
  title: string;
  page: null | Page;
  subPages: null | { path: string; title: string; page: Page }[];
}[] {
  const sectionMap: {
    [section: string]: {
      path: string;
      nav_order?: number | undefined;
      title: string;
      page: null | Page;
      subPages: null | { path: string; title: string; page: Page }[];
    };
  } = {};
  for (const page of pages) {
    // Get the top-level path and ensure it exists
    const [first_, ...rest] = page.id.split("/");
    const first = first_!; // First split always exists
    if (!sectionMap[first]) {
      // Create a top-level hierarchy item with default values
      sectionMap[first] = {
        path: first,
        page: null,
        title: first.replace(/^[a-z]/, (ch) => ch.toUpperCase()),
        subPages: null,
      };
    }
    const section = sectionMap[first]!; // If-statement ensured this exists

    if (rest.length === 0) {
      // This is the
      section.nav_order = page.data.nav_order;
      section.page = page;
      section.title = page.data.title;
    } else {
      const title =
        page.data.layout === "module"
          ? `${page.data.nav_order} - ${page.data.title}`
          : page.data.title;
      if (section.subPages === null) {
        section.subPages = [{ path: page.id, title, page }];
      } else {
        section.subPages.push({ path: page.id, title, page });
      }
    }
  }

  /* Finally, appropriately order the sections and subsections */
  return [...Object.values(sectionMap)]
    .map((section) => {
      if (section.subPages !== null) {
        section.subPages.sort(sortByNavOrderThenPath);
      }
      return section;
    })
    .toSorted(sortByNavOrderThenPath);
}

/**
 * Sorting function for a record with a path and a (possible) page. Where
 * the page exists and has a nav_order property, that will be used; in all
 * other cases, the nav_order will be treated as Infinity and the path will
 * be used to order navigation pages.
 */
function sortByNavOrderThenPath(
  a: { path: string; page: null | Page },
  b: { path: string; page: null | Page }
): number {
  const navA = a.page?.data.nav_order ?? Infinity;
  const navB = b.page?.data.nav_order ?? Infinity;
  return navA < navB
    ? -1
    : navA > navB
      ? 1
      : a.path < b.path
        ? -1
        : a.path > b.path
          ? 1
          : 0;
}
---

<nav>
  <ul id="navigation-list">
    {
      orderedSections.map(({ title, path, subPages }) => {
        const thisTopLevelIsCurrent = Astro.props.current === path;
        const thisTopLevelIsInitiallyOpen =
          Astro.props.current.startsWith(path);
        return (
          <li class={thisTopLevelIsCurrent ? "current" : null}>
            {subPages && (
              <button class={thisTopLevelIsInitiallyOpen ? "open" : "closed"}>
                <svg viewBox="0 0 24 24" aria-hidden="true">
                  <use xlink:href="#svg-arrow-right" />
                </svg>
              </button>
            )}
            <a class="nav nav-top" href={path}>
              {title}
            </a>
            {subPages && (
              <ul class={thisTopLevelIsInitiallyOpen ? "open" : "closed"}>
                {subPages.map(({ path, title }) => (
                  <li class={Astro.props.current === path ? "current" : null}>
                    <a class="nav nav-secondary" href={path}>
                      {title}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
        );
      })
    }
  </ul>
</nav>

<script>
  const navigationList = document.getElementById("navigation-list")!;
  for (const nav of navigationList.children) {
    const button = nav.querySelector("button");
    const ul = nav.querySelector("ul");
    if (button && ul) {
      button.onclick = () => {
        const toggled = button.className === "closed" ? "open" : "closed";
        button.className = toggled;
        ul.className = toggled;
      };
    }
  }
</script>

<style>
  nav {
    padding-top: 3rem;
    padding-bottom: 1rem;
  }
  button {
    display: none;
    position: absolute;
    right: 0;
    background: none;
    border: none;
    width: 2rem;
    height: 2rem;
    cursor: pointer;
    color: var(--emph-color);
    padding: 0.5rem;
  }
  button:hover {
    background-image: var(--hover-expander);
  }

  button.closed {
    display: block;
    transform: rotate(90deg);
  }

  button.open {
    display: block;
    transform: rotate(-90deg);
  }

  a.nav {
    font-size: 0.875rem;
    display: block;
    text-decoration: none;
    min-height: 2rem;
    padding-block: 0.25rem;
    display: grid;
    align-items: center;
    padding-inline: 2rem;
  }

  a.nav-top {
    color: var(--emph-color);
  }

  a.nav:hover {
    background-image: var(--hover-left-background-image);
  }

  a.nav-secondary {
    color: var(--deemph-color);
    margin-left: 1rem;
  }

  ul {
    padding: 0;
  }

  li {
    list-style: none;
    position: relative;
  }

  li.current > a.nav {
    font-weight: bold;
    background-image: var(--hover-left-background-image);
  }

  ul.closed {
    display: none;
  }

  ul.open {
    display: block;
  }
</style>
