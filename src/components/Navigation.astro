---
import { sectionHierarchy } from "../sectionHierarchy";
---

<nav>
  <ul id="navigation-list">
    {
      sectionHierarchy.map(({ title, path, subPages }) => {
        const thisTopLevelIsCurrent = Astro.props.current === path;
        const thisTopLevelIsInitiallyOpen =
          Astro.props.current.startsWith(path);
        return (
          <li class={thisTopLevelIsCurrent ? "current" : null}>
            {subPages && (
              <button
                class={thisTopLevelIsInitiallyOpen ? "open" : "closed"}
                aria-label={`Toggle sub-pages of ${title}`}
              >
                <svg viewBox="0 0 24 24" aria-hidden="true">
                  <use xlink:href="#svg-arrow-right" />
                </svg>
              </button>
            )}
            <a class="nav nav-top" href={path}>
              {title}
            </a>
            {subPages && (
              <ul class={thisTopLevelIsInitiallyOpen ? "open" : "closed"}>
                {subPages.map(({ path, title }) => (
                  <li class={Astro.props.current === path ? "current" : null}>
                    <a class="nav nav-secondary" href={path}>
                      {title}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
        );
      })
    }
  </ul>
</nav>

<script>
  const navigationList = document.getElementById("navigation-list")!;
  for (const nav of navigationList.children) {
    const button = nav.querySelector("button");
    const ul = nav.querySelector("ul");
    if (button && ul) {
      button.onclick = () => {
        const toggled = button.className === "closed" ? "open" : "closed";
        button.className = toggled;
        ul.className = toggled;
      };
    }
  }
</script>

<style>
  nav {
    padding-top: 3rem;
    padding-bottom: 1rem;
  }
  button {
    display: none;
    position: absolute;
    right: 0;
    background: none;
    border: none;
    width: 2rem;
    height: 2rem;
    cursor: pointer;
    color: var(--emph-color);
    padding: 0.5rem;
  }
  button:hover {
    background-image: var(--hover-expander);
  }

  button.closed {
    display: block;
    transform: rotate(90deg);
  }

  button.open {
    display: block;
    transform: rotate(-90deg);
  }

  a.nav {
    font-size: 0.875rem;
    display: block;
    text-decoration: none;
    min-height: 2rem;
    padding-block: 0.25rem;
    display: grid;
    align-items: center;
    padding-inline: 2rem;
  }

  a.nav-top {
    color: var(--emph-color);
  }

  a.nav:hover {
    background-image: var(--hover-left-background-image);
  }

  a.nav-secondary {
    color: var(--deemph-color);
    margin-left: 1rem;
  }

  ul {
    padding: 0;
  }

  li {
    list-style: none;
    position: relative;
  }

  li.current > a.nav {
    font-weight: bold;
    background-image: var(--hover-left-background-image);
  }

  ul.closed {
    display: none;
  }

  ul.open {
    display: block;
  }
</style>
